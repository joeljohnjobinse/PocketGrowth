"use client";

import { useState, useEffect } from "react";
import { useUser } from "@supabase/auth-helpers-react";
import { supabase } from "@/lib/supabaseClient";
import AddAllowanceForm from "./AddAllowanceForm";
import UnlockForm from "./UnlockForm";

export default function DashboardPage() {
  const user = useUser();
  const [lockedAmount, setLockedAmount] = useState<number>(0);
  const [availableAmount, setAvailableAmount] = useState<number>(0);
  const [loading, setLoading] = useState<boolean>(true);

  const fetchAmounts = async () => {
    if (!user?.id) return;

    setLoading(true);

    try {
      const { data: savingsData, error: savingsError } = await supabase
        .from("savings")
        .select("locked_amount")
        .eq("user_id", user.id)
        .single();

      if (savingsError && savingsError.code !== "PGRST116") throw savingsError;

      const locked = savingsData ? Number(savingsData.locked_amount) : 0;
      setLockedAmount(locked);

      const { data: txnData, error: txnError } = await supabase
        .from("transactions")
        .select("amount, type")
        .eq("user_id", user.id);

      if (txnError) throw txnError;

      const totalAllowance = txnData
        ?.filter((t: any) => t.type === "allowance")
        .reduce((sum, t) => sum + Number(t.amount), 0) || 0;

      const totalUnlocked = txnData
        ?.filter((t: any) => t.type === "unlock")
        .reduce((sum, t) => sum + Number(t.amount), 0) || 0;

      setAvailableAmount(totalAllowance - totalUnlocked - locked);
    } catch (err) {
      console.error("Error fetching dashboard data:", err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchAmounts();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [user]);

  if (!user) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-green-50 flex items-center justify-center p-6">
        <div className="bg-white rounded-2xl shadow-xl p-8 text-center max-w-md">
          <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg className="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
            </svg>
          </div>
          <h2 className="text-2xl font-bold text-gray-800 mb-4">Access Required</h2>
          <p className="text-gray-600 mb-6">Please log in to access your financial dashboard</p>
          <a href="/login" className="bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-6 rounded-lg transition-colors duration-200">
            Go to Login
          </a>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-green-50 p-6">
      <div className="max-w-4xl mx-auto">

        {/* Header */}
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-800">PocketGrowth</h1>
            <p className="text-gray-600">Welcome back, {user.email?.split('@')[0]}! ðŸ‘‹</p>
          </div>
          <button
            onClick={() => supabase.auth.signOut()}
            className="bg-white text-red-600 border border-red-200 hover:bg-red-50 font-medium py-2 px-4 rounded-lg transition-colors duration-200 shadow-sm"
          >
            Sign Out
          </button>
        </div>

        {loading ? (
          <div className="bg-white rounded-2xl shadow-lg p-8 text-center">
            <div className="animate-pulse">
              <div className="w-12 h-12 bg-blue-200 rounded-full mx-auto mb-4"></div>
              <div className="h-6 bg-gray-200 rounded w-1/3 mx-auto mb-2"></div>
              <div className="h-4 bg-gray-200 rounded w-1/2 mx-auto"></div>
            </div>
          </div>
        ) : (
          <>
            {/* Stats Cards */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
              <div className="bg-white rounded-2xl shadow-lg p-6 border-l-4 border-blue-500 hover:shadow-xl transition-shadow duration-300">
                <div className="flex items-center mb-4">
                  <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center mr-3">
                    <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <h3 className="text-gray-500 font-medium">Available to Spend</h3>
                </div>
                <p className="text-3xl font-bold text-gray-800">${availableAmount.toFixed(2)}</p>
                <p className="text-sm text-gray-500 mt-2">ready for your expenses</p>
              </div>

              <div className="bg-white rounded-2xl shadow-lg p-6 border-l-4 border-green-500 hover:shadow-xl transition-shadow duration-300">
                <div className="flex items-center mb-4">
                  <div className="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center mr-3">
                    <svg className="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                    </svg>
                  </div>
                  <h3 className="text-gray-500 font-medium">Locked Savings</h3>
                </div>
                <p className="text-3xl font-bold text-gray-800">${lockedAmount.toFixed(2)}</p>
                <p className="text-sm text-gray-500 mt-2">secured for your future</p>
              </div>
            </div>

            {/* Forms Section */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">

              <div className="bg-white rounded-2xl shadow-lg p-6 hover:shadow-xl transition-shadow duration-300">
                <AddAllowanceForm
                  userId={user.id}
                  onUpdate={(newLocked) => {
                    setLockedAmount(newLocked);
                    fetchAmounts();
                  }}
                />
              </div>

              <div className="bg-white rounded-2xl shadow-lg p-6 hover:shadow-xl transition-shadow duration-300">
                <UnlockForm
                  userId={user.id}
                  currentLocked={lockedAmount}
                  onUpdate={(newLocked) => {
                    setLockedAmount(newLocked);
                    fetchAmounts();
                  }}
                />
              </div>

            </div>

            {/* Quick Stats */}
            <div className="bg-white rounded-2xl shadow-lg p-6 mt-6 hover:shadow-xl transition-shadow duration-300">
              <h3 className="text-lg font-semibold text-gray-800 mb-4">Financial Summary</h3>
              <div className="grid grid-cols-2 gap-4">
                <div className="text-center p-4 bg-blue-50 rounded-lg">
                  <p className="text-2xl font-bold text-blue-600">${(availableAmount + lockedAmount).toFixed(2)}</p>
                  <p className="text-sm text-gray-600">Total Balance</p>
                </div>
                <div className="text-center p-4 bg-green-50 rounded-lg">
                  <p className="text-2xl font-bold text-green-600">{lockedAmount > 0 ? 'âœ…' : 'ðŸ’ª'}</p>
                  <p className="text-sm text-gray-600">Savings Status</p>
                </div>
              </div>
            </div>
          </>
        )}
      </div>
    </div>
  );
}
